{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Competitive Programming": {
		"prefix": "comp",
		"body": [
			"/**",
			"* [name]",
			"* Problem ",
			"* TIME: ",
			"* AUTHOR: Astik Roy",
			"**/\n",


			"#include <iostream>\n",

			"// #include <ext/pb_ds/assoc_container.hpp>",
			"// #include <ext/pb_ds/tree_policy.hpp>",
			"// #include <functional>\n",

			"using namespace std;",
			"// using namespace __gnu_pbds;\n",

			"typedef long long int ll;",
			"typedef pair <int, int> pii;\n",

			"// typedef tree<int , null_mapped_type ,  less<int> , rb_tree_tag , tree_order_statistics_node_update> ordered_set;",
			"// typedef tree<int , null_mapped_type ,  less_equal<int> , rb_tree_tag , tree_order_statistics_node_update> ordered_multiset;\n",
			
			"class Solution",
			"{\n",
			
			"public:",
				"\tvoid solve()",
				"\t{",
				"\t\t// $0\n",
					
			
					"\t\treturn;",
				"\t}",
			"};\n",
			"int main()\n{",
			"\tios_base::sync_with_stdio(false);",
			"\t// cin.tie(NULL);\n",
			"\tSolution sol;",
			"\t// int TC;\n",
			"\t// cin >> TC;\n",
			"\t// while(TC--)",
			"\t\tsol.solve();\n",
			"\treturn 0;",
			"}"
		],
		"description": "My template for competitive programming"
	}
}